/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/sharedmem_transport/msg/SharedMemBlock.msg */
#ifndef SHAREDMEM_TRANSPORT_MESSAGE_SHAREDMEMBLOCK_H
#define SHAREDMEM_TRANSPORT_MESSAGE_SHAREDMEMBLOCK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sharedmem_transport
{
template <class ContainerAllocator>
struct SharedMemBlock_ {
  typedef SharedMemBlock_<ContainerAllocator> Type;

  SharedMemBlock_()
  : handle(0)
  , size(0)
  , allocated(0)
  , name()
  {
  }

  SharedMemBlock_(const ContainerAllocator& _alloc)
  : handle(0)
  , size(0)
  , allocated(0)
  , name(_alloc)
  {
  }

  typedef uint32_t _handle_type;
  uint32_t handle;

  typedef uint32_t _size_type;
  uint32_t size;

  typedef uint32_t _allocated_type;
  uint32_t allocated;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;


  typedef boost::shared_ptr< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator>  const> ConstPtr;
}; // struct SharedMemBlock
typedef  ::sharedmem_transport::SharedMemBlock_<std::allocator<void> > SharedMemBlock;

typedef boost::shared_ptr< ::sharedmem_transport::SharedMemBlock> SharedMemBlockPtr;
typedef boost::shared_ptr< ::sharedmem_transport::SharedMemBlock const> SharedMemBlockConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sharedmem_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> > {
  static const char* value() 
  {
    return "56cdbb4565401cc80f0d826e209bbbe5";
  }

  static const char* value(const  ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x56cdbb4565401cc8ULL;
  static const uint64_t static_value2 = 0x0f0d826e209bbbe5ULL;
};

template<class ContainerAllocator>
struct DataType< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SharedMemBlock";
  }

  static const char* value(const  ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 handle\n\
uint32 size\n\
uint32 allocated\n\
string name\n\
\n\
";
  }

  static const char* value(const  ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.handle);
    stream.next(m.size);
    stream.next(m.allocated);
    stream.next(m.name);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SharedMemBlock_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> & v) 
  {
    s << indent << "handle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.handle);
    s << indent << "size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size);
    s << indent << "allocated: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.allocated);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SHAREDMEM_TRANSPORT_MESSAGE_SHAREDMEMBLOCK_H

