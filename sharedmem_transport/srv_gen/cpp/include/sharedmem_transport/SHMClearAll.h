/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/sharedmem_transport/srv/SHMClearAll.srv */
#ifndef SHAREDMEM_TRANSPORT_SERVICE_SHMCLEARALL_H
#define SHAREDMEM_TRANSPORT_SERVICE_SHMCLEARALL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace sharedmem_transport
{
template <class ContainerAllocator>
struct SHMClearAllRequest_ {
  typedef SHMClearAllRequest_<ContainerAllocator> Type;

  SHMClearAllRequest_()
  {
  }

  SHMClearAllRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SHMClearAllRequest
typedef  ::sharedmem_transport::SHMClearAllRequest_<std::allocator<void> > SHMClearAllRequest;

typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllRequest> SHMClearAllRequestPtr;
typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllRequest const> SHMClearAllRequestConstPtr;



template <class ContainerAllocator>
struct SHMClearAllResponse_ {
  typedef SHMClearAllResponse_<ContainerAllocator> Type;

  SHMClearAllResponse_()
  : result(0)
  {
  }

  SHMClearAllResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SHMClearAllResponse
typedef  ::sharedmem_transport::SHMClearAllResponse_<std::allocator<void> > SHMClearAllResponse;

typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllResponse> SHMClearAllResponsePtr;
typedef boost::shared_ptr< ::sharedmem_transport::SHMClearAllResponse const> SHMClearAllResponseConstPtr;


struct SHMClearAll
{

typedef SHMClearAllRequest Request;
typedef SHMClearAllResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SHMClearAll
} // namespace sharedmem_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMClearAllRequest";
  }

  static const char* value(const  ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMClearAllResponse";
  }

  static const char* value(const  ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SHMClearAllRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SHMClearAllResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sharedmem_transport::SHMClearAll> {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const sharedmem_transport::SHMClearAll&) { return value(); } 
};

template<>
struct DataType<sharedmem_transport::SHMClearAll> {
  static const char* value() 
  {
    return "sharedmem_transport/SHMClearAll";
  }

  static const char* value(const sharedmem_transport::SHMClearAll&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMClearAll";
  }

  static const char* value(const sharedmem_transport::SHMClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMClearAll";
  }

  static const char* value(const sharedmem_transport::SHMClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SHAREDMEM_TRANSPORT_SERVICE_SHMCLEARALL_H

