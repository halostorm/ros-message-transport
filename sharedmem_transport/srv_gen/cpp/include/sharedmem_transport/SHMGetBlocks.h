/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/sharedmem_transport/srv/SHMGetBlocks.srv */
#ifndef SHAREDMEM_TRANSPORT_SERVICE_SHMGETBLOCKS_H
#define SHAREDMEM_TRANSPORT_SERVICE_SHMGETBLOCKS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "sharedmem_transport/SharedMemBlock.h"

namespace sharedmem_transport
{
template <class ContainerAllocator>
struct SHMGetBlocksRequest_ {
  typedef SHMGetBlocksRequest_<ContainerAllocator> Type;

  SHMGetBlocksRequest_()
  {
  }

  SHMGetBlocksRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SHMGetBlocksRequest
typedef  ::sharedmem_transport::SHMGetBlocksRequest_<std::allocator<void> > SHMGetBlocksRequest;

typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksRequest> SHMGetBlocksRequestPtr;
typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksRequest const> SHMGetBlocksRequestConstPtr;



template <class ContainerAllocator>
struct SHMGetBlocksResponse_ {
  typedef SHMGetBlocksResponse_<ContainerAllocator> Type;

  SHMGetBlocksResponse_()
  : blocks()
  {
  }

  SHMGetBlocksResponse_(const ContainerAllocator& _alloc)
  : blocks(_alloc)
  {
  }

  typedef std::vector< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> >::other >  _blocks_type;
  std::vector< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::sharedmem_transport::SharedMemBlock_<ContainerAllocator> >::other >  blocks;


  typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SHMGetBlocksResponse
typedef  ::sharedmem_transport::SHMGetBlocksResponse_<std::allocator<void> > SHMGetBlocksResponse;

typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksResponse> SHMGetBlocksResponsePtr;
typedef boost::shared_ptr< ::sharedmem_transport::SHMGetBlocksResponse const> SHMGetBlocksResponseConstPtr;


struct SHMGetBlocks
{

typedef SHMGetBlocksRequest Request;
typedef SHMGetBlocksResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SHMGetBlocks
} // namespace sharedmem_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMGetBlocksRequest";
  }

  static const char* value(const  ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f7f2be967ee5b16b25d7eeba51fc62a";
  }

  static const char* value(const  ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2f7f2be967ee5b16ULL;
  static const uint64_t static_value2 = 0xb25d7eeba51fc62aULL;
};

template<class ContainerAllocator>
struct DataType< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMGetBlocksResponse";
  }

  static const char* value(const  ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SharedMemBlock[] blocks\n\
\n\
\n\
================================================================================\n\
MSG: sharedmem_transport/SharedMemBlock\n\
uint32 handle\n\
uint32 size\n\
uint32 allocated\n\
string name\n\
\n\
";
  }

  static const char* value(const  ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SHMGetBlocksRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.blocks);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SHMGetBlocksResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sharedmem_transport::SHMGetBlocks> {
  static const char* value() 
  {
    return "2f7f2be967ee5b16b25d7eeba51fc62a";
  }

  static const char* value(const sharedmem_transport::SHMGetBlocks&) { return value(); } 
};

template<>
struct DataType<sharedmem_transport::SHMGetBlocks> {
  static const char* value() 
  {
    return "sharedmem_transport/SHMGetBlocks";
  }

  static const char* value(const sharedmem_transport::SHMGetBlocks&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f7f2be967ee5b16b25d7eeba51fc62a";
  }

  static const char* value(const sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMGetBlocks";
  }

  static const char* value(const sharedmem_transport::SHMGetBlocksRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2f7f2be967ee5b16b25d7eeba51fc62a";
  }

  static const char* value(const sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sharedmem_transport/SHMGetBlocks";
  }

  static const char* value(const sharedmem_transport::SHMGetBlocksResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SHAREDMEM_TRANSPORT_SERVICE_SHMGETBLOCKS_H

