/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/bz2_transport/msg/BZ2Packet.msg */
#ifndef BZ2_TRANSPORT_MESSAGE_BZ2PACKET_H
#define BZ2_TRANSPORT_MESSAGE_BZ2PACKET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace bz2_transport
{
template <class ContainerAllocator>
struct BZ2Packet_ {
  typedef BZ2Packet_<ContainerAllocator> Type;

  BZ2Packet_()
  : original_length(0)
  , buffer()
  {
  }

  BZ2Packet_(const ContainerAllocator& _alloc)
  : original_length(0)
  , buffer(_alloc)
  {
  }

  typedef uint32_t _original_length_type;
  uint32_t original_length;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _buffer_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  buffer;


  typedef boost::shared_ptr< ::bz2_transport::BZ2Packet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bz2_transport::BZ2Packet_<ContainerAllocator>  const> ConstPtr;
}; // struct BZ2Packet
typedef  ::bz2_transport::BZ2Packet_<std::allocator<void> > BZ2Packet;

typedef boost::shared_ptr< ::bz2_transport::BZ2Packet> BZ2PacketPtr;
typedef boost::shared_ptr< ::bz2_transport::BZ2Packet const> BZ2PacketConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::bz2_transport::BZ2Packet_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::bz2_transport::BZ2Packet_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace bz2_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::bz2_transport::BZ2Packet_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::bz2_transport::BZ2Packet_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::bz2_transport::BZ2Packet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "37a209db6e0c11cc6c12601cdd2e4aef";
  }

  static const char* value(const  ::bz2_transport::BZ2Packet_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x37a209db6e0c11ccULL;
  static const uint64_t static_value2 = 0x6c12601cdd2e4aefULL;
};

template<class ContainerAllocator>
struct DataType< ::bz2_transport::BZ2Packet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bz2_transport/BZ2Packet";
  }

  static const char* value(const  ::bz2_transport::BZ2Packet_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::bz2_transport::BZ2Packet_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 original_length\n\
uint8[] buffer\n\
\n\
";
  }

  static const char* value(const  ::bz2_transport::BZ2Packet_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::bz2_transport::BZ2Packet_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.original_length);
    stream.next(m.buffer);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct BZ2Packet_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bz2_transport::BZ2Packet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::bz2_transport::BZ2Packet_<ContainerAllocator> & v) 
  {
    s << indent << "original_length: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.original_length);
    s << indent << "buffer[]" << std::endl;
    for (size_t i = 0; i < v.buffer.size(); ++i)
    {
      s << indent << "  buffer[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.buffer[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // BZ2_TRANSPORT_MESSAGE_BZ2PACKET_H

