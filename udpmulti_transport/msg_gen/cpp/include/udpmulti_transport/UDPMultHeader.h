/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/udpmulti_transport/msg/UDPMultHeader.msg */
#ifndef UDPMULTI_TRANSPORT_MESSAGE_UDPMULTHEADER_H
#define UDPMULTI_TRANSPORT_MESSAGE_UDPMULTHEADER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace udpmulti_transport
{
template <class ContainerAllocator>
struct UDPMultHeader_ {
  typedef UDPMultHeader_<ContainerAllocator> Type;

  UDPMultHeader_()
  : multicast_address()
  , port(0)
  {
  }

  UDPMultHeader_(const ContainerAllocator& _alloc)
  : multicast_address(_alloc)
  , port(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _multicast_address_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  multicast_address;

  typedef uint32_t _port_type;
  uint32_t port;


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultHeader
typedef  ::udpmulti_transport::UDPMultHeader_<std::allocator<void> > UDPMultHeader;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultHeader> UDPMultHeaderPtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultHeader const> UDPMultHeaderConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace udpmulti_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1e14983195867c72000e1c09bfde0cd0";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1e14983195867c72ULL;
  static const uint64_t static_value2 = 0x000e1c09bfde0cd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultHeader";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string multicast_address\n\
uint32 port\n\
\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.multicast_address);
    stream.next(m.port);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultHeader_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::udpmulti_transport::UDPMultHeader_<ContainerAllocator> & v) 
  {
    s << indent << "multicast_address: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.multicast_address);
    s << indent << "port: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.port);
  }
};


} // namespace message_operations
} // namespace ros

#endif // UDPMULTI_TRANSPORT_MESSAGE_UDPMULTHEADER_H

