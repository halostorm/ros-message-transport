/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/udpmulti_transport/srv/UDPMultClearAll.srv */
#ifndef UDPMULTI_TRANSPORT_SERVICE_UDPMULTCLEARALL_H
#define UDPMULTI_TRANSPORT_SERVICE_UDPMULTCLEARALL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace udpmulti_transport
{
template <class ContainerAllocator>
struct UDPMultClearAllRequest_ {
  typedef UDPMultClearAllRequest_<ContainerAllocator> Type;

  UDPMultClearAllRequest_()
  {
  }

  UDPMultClearAllRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultClearAllRequest
typedef  ::udpmulti_transport::UDPMultClearAllRequest_<std::allocator<void> > UDPMultClearAllRequest;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllRequest> UDPMultClearAllRequestPtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllRequest const> UDPMultClearAllRequestConstPtr;



template <class ContainerAllocator>
struct UDPMultClearAllResponse_ {
  typedef UDPMultClearAllResponse_<ContainerAllocator> Type;

  UDPMultClearAllResponse_()
  : result(0)
  {
  }

  UDPMultClearAllResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultClearAllResponse
typedef  ::udpmulti_transport::UDPMultClearAllResponse_<std::allocator<void> > UDPMultClearAllResponse;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllResponse> UDPMultClearAllResponsePtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultClearAllResponse const> UDPMultClearAllResponseConstPtr;


struct UDPMultClearAll
{

typedef UDPMultClearAllRequest Request;
typedef UDPMultClearAllResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct UDPMultClearAll
} // namespace udpmulti_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultClearAllRequest";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultClearAllResponse";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultClearAllRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultClearAllResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<udpmulti_transport::UDPMultClearAll> {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const udpmulti_transport::UDPMultClearAll&) { return value(); } 
};

template<>
struct DataType<udpmulti_transport::UDPMultClearAll> {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultClearAll";
  }

  static const char* value(const udpmulti_transport::UDPMultClearAll&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultClearAll";
  }

  static const char* value(const udpmulti_transport::UDPMultClearAllRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultClearAll";
  }

  static const char* value(const udpmulti_transport::UDPMultClearAllResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UDPMULTI_TRANSPORT_SERVICE_UDPMULTCLEARALL_H

