/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/udpmulti_transport/srv/UDPMultRegisterTopic.srv */
#ifndef UDPMULTI_TRANSPORT_SERVICE_UDPMULTREGISTERTOPIC_H
#define UDPMULTI_TRANSPORT_SERVICE_UDPMULTREGISTERTOPIC_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace udpmulti_transport
{
template <class ContainerAllocator>
struct UDPMultRegisterTopicRequest_ {
  typedef UDPMultRegisterTopicRequest_<ContainerAllocator> Type;

  UDPMultRegisterTopicRequest_()
  : topic()
  {
  }

  UDPMultRegisterTopicRequest_(const ContainerAllocator& _alloc)
  : topic(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topic;


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultRegisterTopicRequest
typedef  ::udpmulti_transport::UDPMultRegisterTopicRequest_<std::allocator<void> > UDPMultRegisterTopicRequest;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicRequest> UDPMultRegisterTopicRequestPtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicRequest const> UDPMultRegisterTopicRequestConstPtr;



template <class ContainerAllocator>
struct UDPMultRegisterTopicResponse_ {
  typedef UDPMultRegisterTopicResponse_<ContainerAllocator> Type;

  UDPMultRegisterTopicResponse_()
  : multicast_address()
  , port(0)
  {
  }

  UDPMultRegisterTopicResponse_(const ContainerAllocator& _alloc)
  : multicast_address(_alloc)
  , port(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _multicast_address_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  multicast_address;

  typedef uint16_t _port_type;
  uint16_t port;


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultRegisterTopicResponse
typedef  ::udpmulti_transport::UDPMultRegisterTopicResponse_<std::allocator<void> > UDPMultRegisterTopicResponse;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicResponse> UDPMultRegisterTopicResponsePtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultRegisterTopicResponse const> UDPMultRegisterTopicResponseConstPtr;


struct UDPMultRegisterTopic
{

typedef UDPMultRegisterTopicRequest Request;
typedef UDPMultRegisterTopicResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct UDPMultRegisterTopic
} // namespace udpmulti_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d8f94bae31b356b24d0427f80426d0c3";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd8f94bae31b356b2ULL;
  static const uint64_t static_value2 = 0x4d0427f80426d0c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultRegisterTopicRequest";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string topic\n\
\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "788ff22966c25b901c0a6454f5c3cb60";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x788ff22966c25b90ULL;
  static const uint64_t static_value2 = 0x1c0a6454f5c3cb60ULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultRegisterTopicResponse";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string multicast_address\n\
uint16 port\n\
\n\
\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topic);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultRegisterTopicRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.multicast_address);
    stream.next(m.port);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultRegisterTopicResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<udpmulti_transport::UDPMultRegisterTopic> {
  static const char* value() 
  {
    return "01e42bac3b5bfa13c13f4a93b95bceb1";
  }

  static const char* value(const udpmulti_transport::UDPMultRegisterTopic&) { return value(); } 
};

template<>
struct DataType<udpmulti_transport::UDPMultRegisterTopic> {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultRegisterTopic";
  }

  static const char* value(const udpmulti_transport::UDPMultRegisterTopic&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "01e42bac3b5bfa13c13f4a93b95bceb1";
  }

  static const char* value(const udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultRegisterTopic";
  }

  static const char* value(const udpmulti_transport::UDPMultRegisterTopicRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "01e42bac3b5bfa13c13f4a93b95bceb1";
  }

  static const char* value(const udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultRegisterTopic";
  }

  static const char* value(const udpmulti_transport::UDPMultRegisterTopicResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UDPMULTI_TRANSPORT_SERVICE_UDPMULTREGISTERTOPIC_H

