/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/udpmulti_transport/srv/UDPMultGetTopicList.srv */
#ifndef UDPMULTI_TRANSPORT_SERVICE_UDPMULTGETTOPICLIST_H
#define UDPMULTI_TRANSPORT_SERVICE_UDPMULTGETTOPICLIST_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "udpmulti_transport/UDPMultTopic.h"

namespace udpmulti_transport
{
template <class ContainerAllocator>
struct UDPMultGetTopicListRequest_ {
  typedef UDPMultGetTopicListRequest_<ContainerAllocator> Type;

  UDPMultGetTopicListRequest_()
  {
  }

  UDPMultGetTopicListRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultGetTopicListRequest
typedef  ::udpmulti_transport::UDPMultGetTopicListRequest_<std::allocator<void> > UDPMultGetTopicListRequest;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListRequest> UDPMultGetTopicListRequestPtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListRequest const> UDPMultGetTopicListRequestConstPtr;



template <class ContainerAllocator>
struct UDPMultGetTopicListResponse_ {
  typedef UDPMultGetTopicListResponse_<ContainerAllocator> Type;

  UDPMultGetTopicListResponse_()
  : multicast_address()
  , topics()
  {
  }

  UDPMultGetTopicListResponse_(const ContainerAllocator& _alloc)
  : multicast_address(_alloc)
  , topics(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _multicast_address_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  multicast_address;

  typedef std::vector< ::udpmulti_transport::UDPMultTopic_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::udpmulti_transport::UDPMultTopic_<ContainerAllocator> >::other >  _topics_type;
  std::vector< ::udpmulti_transport::UDPMultTopic_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::udpmulti_transport::UDPMultTopic_<ContainerAllocator> >::other >  topics;


  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct UDPMultGetTopicListResponse
typedef  ::udpmulti_transport::UDPMultGetTopicListResponse_<std::allocator<void> > UDPMultGetTopicListResponse;

typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListResponse> UDPMultGetTopicListResponsePtr;
typedef boost::shared_ptr< ::udpmulti_transport::UDPMultGetTopicListResponse const> UDPMultGetTopicListResponseConstPtr;


struct UDPMultGetTopicList
{

typedef UDPMultGetTopicListRequest Request;
typedef UDPMultGetTopicListResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct UDPMultGetTopicList
} // namespace udpmulti_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultGetTopicListRequest";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22672cb98b49fe101a321cb17bceec21";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x22672cb98b49fe10ULL;
  static const uint64_t static_value2 = 0x1a321cb17bceec21ULL;
};

template<class ContainerAllocator>
struct DataType< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultGetTopicListResponse";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string multicast_address\n\
udpmulti_transport/UDPMultTopic[] topics\n\
\n\
\n\
================================================================================\n\
MSG: udpmulti_transport/UDPMultTopic\n\
string topic\n\
uint16 port\n\
\n\
";
  }

  static const char* value(const  ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultGetTopicListRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.multicast_address);
    stream.next(m.topics);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct UDPMultGetTopicListResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<udpmulti_transport::UDPMultGetTopicList> {
  static const char* value() 
  {
    return "22672cb98b49fe101a321cb17bceec21";
  }

  static const char* value(const udpmulti_transport::UDPMultGetTopicList&) { return value(); } 
};

template<>
struct DataType<udpmulti_transport::UDPMultGetTopicList> {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultGetTopicList";
  }

  static const char* value(const udpmulti_transport::UDPMultGetTopicList&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22672cb98b49fe101a321cb17bceec21";
  }

  static const char* value(const udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultGetTopicList";
  }

  static const char* value(const udpmulti_transport::UDPMultGetTopicListRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22672cb98b49fe101a321cb17bceec21";
  }

  static const char* value(const udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "udpmulti_transport/UDPMultGetTopicList";
  }

  static const char* value(const udpmulti_transport::UDPMultGetTopicListResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // UDPMULTI_TRANSPORT_SERVICE_UDPMULTGETTOPICLIST_H

