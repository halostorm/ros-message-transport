/* Auto-generated by genmsg_cpp for file /home/duwenwen/Workspace/pointcloudcompress/ros-message-transport/throttled_transport/srv/SetThrottlingParameters.srv */
#ifndef THROTTLED_TRANSPORT_SERVICE_SETTHROTTLINGPARAMETERS_H
#define THROTTLED_TRANSPORT_SERVICE_SETTHROTTLINGPARAMETERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace throttled_transport
{
template <class ContainerAllocator>
struct SetThrottlingParametersRequest_ {
  typedef SetThrottlingParametersRequest_<ContainerAllocator> Type;

  SetThrottlingParametersRequest_()
  : throttling_mode()
  , max_frequency(0.0)
  , max_bandwidth(0.0)
  {
  }

  SetThrottlingParametersRequest_(const ContainerAllocator& _alloc)
  : throttling_mode(_alloc)
  , max_frequency(0.0)
  , max_bandwidth(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _throttling_mode_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  throttling_mode;

  typedef float _max_frequency_type;
  float max_frequency;

  typedef float _max_bandwidth_type;
  float max_bandwidth;


  typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct SetThrottlingParametersRequest
typedef  ::throttled_transport::SetThrottlingParametersRequest_<std::allocator<void> > SetThrottlingParametersRequest;

typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersRequest> SetThrottlingParametersRequestPtr;
typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersRequest const> SetThrottlingParametersRequestConstPtr;



template <class ContainerAllocator>
struct SetThrottlingParametersResponse_ {
  typedef SetThrottlingParametersResponse_<ContainerAllocator> Type;

  SetThrottlingParametersResponse_()
  : result(0)
  {
  }

  SetThrottlingParametersResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int32_t _result_type;
  int32_t result;


  typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct SetThrottlingParametersResponse
typedef  ::throttled_transport::SetThrottlingParametersResponse_<std::allocator<void> > SetThrottlingParametersResponse;

typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersResponse> SetThrottlingParametersResponsePtr;
typedef boost::shared_ptr< ::throttled_transport::SetThrottlingParametersResponse const> SetThrottlingParametersResponseConstPtr;


struct SetThrottlingParameters
{

typedef SetThrottlingParametersRequest Request;
typedef SetThrottlingParametersResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetThrottlingParameters
} // namespace throttled_transport

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "50cf0f51c8cc02031c322ecf054f5f39";
  }

  static const char* value(const  ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x50cf0f51c8cc0203ULL;
  static const uint64_t static_value2 = 0x1c322ecf054f5f39ULL;
};

template<class ContainerAllocator>
struct DataType< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "throttled_transport/SetThrottlingParametersRequest";
  }

  static const char* value(const  ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string throttling_mode\n\
\n\
float32 max_frequency\n\
float32 max_bandwidth\n\
\n\
";
  }

  static const char* value(const  ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "034a8e20d6a306665e3a5b340fab3f09";
  }

  static const char* value(const  ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x034a8e20d6a30666ULL;
  static const uint64_t static_value2 = 0x5e3a5b340fab3f09ULL;
};

template<class ContainerAllocator>
struct DataType< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "throttled_transport/SetThrottlingParametersResponse";
  }

  static const char* value(const  ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.throttling_mode);
    stream.next(m.max_frequency);
    stream.next(m.max_bandwidth);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SetThrottlingParametersRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct SetThrottlingParametersResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<throttled_transport::SetThrottlingParameters> {
  static const char* value() 
  {
    return "1171dbf4537d0192990c184bda16de61";
  }

  static const char* value(const throttled_transport::SetThrottlingParameters&) { return value(); } 
};

template<>
struct DataType<throttled_transport::SetThrottlingParameters> {
  static const char* value() 
  {
    return "throttled_transport/SetThrottlingParameters";
  }

  static const char* value(const throttled_transport::SetThrottlingParameters&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1171dbf4537d0192990c184bda16de61";
  }

  static const char* value(const throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "throttled_transport/SetThrottlingParameters";
  }

  static const char* value(const throttled_transport::SetThrottlingParametersRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1171dbf4537d0192990c184bda16de61";
  }

  static const char* value(const throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "throttled_transport/SetThrottlingParameters";
  }

  static const char* value(const throttled_transport::SetThrottlingParametersResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // THROTTLED_TRANSPORT_SERVICE_SETTHROTTLINGPARAMETERS_H

